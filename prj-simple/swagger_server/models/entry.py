# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Entry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, key: str=None, name: str=None):  # noqa: E501
        """Entry - a model defined in Swagger

        :param data: The data of this Entry.  # noqa: E501
        :type data: object
        :param key: The key of this Entry.  # noqa: E501
        :type key: str
        :param name: The name of this Entry.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'data': object,
            'key': str,
            'name': str
        }

        self.attribute_map = {
            'data': 'data',
            'key': 'key',
            'name': 'name'
        }

        self._data = data
        self._key = key
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Entry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entry of this Entry.  # noqa: E501
        :rtype: Entry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> object:
        """Gets the data of this Entry.


        :return: The data of this Entry.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data: object):
        """Sets the data of this Entry.


        :param data: The data of this Entry.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def key(self) -> str:
        """Gets the key of this Entry.

        An unique ID for the entry in the given table. This may have   a semantic meaning or could be just an UUID.  # noqa: E501

        :return: The key of this Entry.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this Entry.

        An unique ID for the entry in the given table. This may have   a semantic meaning or could be just an UUID.  # noqa: E501

        :param key: The key of this Entry.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this Entry.

        Searchable string.  # noqa: E501

        :return: The name of this Entry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Entry.

        Searchable string.  # noqa: E501

        :param name: The name of this Entry.
        :type name: str
        """

        self._name = name
