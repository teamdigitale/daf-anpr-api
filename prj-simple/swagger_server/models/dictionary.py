# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Dictionary(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, index: str=None, last_version: str=None, meta: object=None, name: str=None, uri: str=None, versions: str=None):  # noqa: E501
        """Dictionary - a model defined in Swagger

        :param description: The description of this Dictionary.  # noqa: E501
        :type description: str
        :param index: The index of this Dictionary.  # noqa: E501
        :type index: str
        :param last_version: The last_version of this Dictionary.  # noqa: E501
        :type last_version: str
        :param meta: The meta of this Dictionary.  # noqa: E501
        :type meta: object
        :param name: The name of this Dictionary.  # noqa: E501
        :type name: str
        :param uri: The uri of this Dictionary.  # noqa: E501
        :type uri: str
        :param versions: The versions of this Dictionary.  # noqa: E501
        :type versions: str
        """
        self.swagger_types = {
            'description': str,
            'index': str,
            'last_version': str,
            'meta': object,
            'name': str,
            'uri': str,
            'versions': str
        }

        self.attribute_map = {
            'description': 'description',
            'index': 'index',
            'last_version': 'last_version',
            'meta': 'meta',
            'name': 'name',
            'uri': 'uri',
            'versions': 'versions'
        }

        self._description = description
        self._index = index
        self._last_version = last_version
        self._meta = meta
        self._name = name
        self._uri = uri
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt) -> 'Dictionary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dictionary of this Dictionary.  # noqa: E501
        :rtype: Dictionary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this Dictionary.


        :return: The description of this Dictionary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Dictionary.


        :param description: The description of this Dictionary.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def index(self) -> str:
        """Gets the index of this Dictionary.

        The field used as a primary key  # noqa: E501

        :return: The index of this Dictionary.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index: str):
        """Sets the index of this Dictionary.

        The field used as a primary key  # noqa: E501

        :param index: The index of this Dictionary.
        :type index: str
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def last_version(self) -> str:
        """Gets the last_version of this Dictionary.


        :return: The last_version of this Dictionary.
        :rtype: str
        """
        return self._last_version

    @last_version.setter
    def last_version(self, last_version: str):
        """Sets the last_version of this Dictionary.


        :param last_version: The last_version of this Dictionary.
        :type last_version: str
        """
        if last_version is None:
            raise ValueError("Invalid value for `last_version`, must not be `None`")  # noqa: E501

        self._last_version = last_version

    @property
    def meta(self) -> object:
        """Gets the meta of this Dictionary.

        meta-informations on the dictionary. May be implementation-specific.  # noqa: E501

        :return: The meta of this Dictionary.
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta: object):
        """Sets the meta of this Dictionary.

        meta-informations on the dictionary. May be implementation-specific.  # noqa: E501

        :param meta: The meta of this Dictionary.
        :type meta: object
        """

        self._meta = meta

    @property
    def name(self) -> str:
        """Gets the name of this Dictionary.


        :return: The name of this Dictionary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Dictionary.


        :param name: The name of this Dictionary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def uri(self) -> str:
        """Gets the uri of this Dictionary.


        :return: The uri of this Dictionary.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this Dictionary.


        :param uri: The uri of this Dictionary.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def versions(self) -> str:
        """Gets the versions of this Dictionary.


        :return: The versions of this Dictionary.
        :rtype: str
        """
        return self._versions

    @versions.setter
    def versions(self, versions: str):
        """Sets the versions of this Dictionary.


        :param versions: The versions of this Dictionary.
        :type versions: str
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions
