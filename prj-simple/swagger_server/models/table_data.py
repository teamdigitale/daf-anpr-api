# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TableData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, index: str=None, items: List[object]=None, name: str=None, ttl: int=None):  # noqa: E501
        """TableData - a model defined in Swagger

        :param description: The description of this TableData.  # noqa: E501
        :type description: str
        :param index: The index of this TableData.  # noqa: E501
        :type index: str
        :param items: The items of this TableData.  # noqa: E501
        :type items: List[object]
        :param name: The name of this TableData.  # noqa: E501
        :type name: str
        :param ttl: The ttl of this TableData.  # noqa: E501
        :type ttl: int
        """
        self.swagger_types = {
            'description': str,
            'index': str,
            'items': List[object],
            'name': str,
            'ttl': int
        }

        self.attribute_map = {
            'description': 'description',
            'index': 'index',
            'items': 'items',
            'name': 'name',
            'ttl': 'ttl'
        }

        self._description = description
        self._index = index
        self._items = items
        self._name = name
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt) -> 'TableData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TableData of this TableData.  # noqa: E501
        :rtype: TableData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this TableData.


        :return: The description of this TableData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this TableData.


        :param description: The description of this TableData.
        :type description: str
        """

        self._description = description

    @property
    def index(self) -> str:
        """Gets the index of this TableData.

        The item field to be used as an index.  # noqa: E501

        :return: The index of this TableData.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index: str):
        """Sets the index of this TableData.

        The item field to be used as an index.  # noqa: E501

        :param index: The index of this TableData.
        :type index: str
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def items(self) -> List[object]:
        """Gets the items of this TableData.

        A list of object, all of the same structure.  # noqa: E501

        :return: The items of this TableData.
        :rtype: List[object]
        """
        return self._items

    @items.setter
    def items(self, items: List[object]):
        """Sets the items of this TableData.

        A list of object, all of the same structure.  # noqa: E501

        :param items: The items of this TableData.
        :type items: List[object]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def name(self) -> str:
        """Gets the name of this TableData.


        :return: The name of this TableData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TableData.


        :param name: The name of this TableData.
        :type name: str
        """

        self._name = name

    @property
    def ttl(self) -> int:
        """Gets the ttl of this TableData.

        Seconds to the invalidation of the API.  # noqa: E501

        :return: The ttl of this TableData.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl: int):
        """Sets the ttl of this TableData.

        Seconds to the invalidation of the API.  # noqa: E501

        :param ttl: The ttl of this TableData.
        :type ttl: int
        """

        self._ttl = ttl
