# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Table(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, table_uri: str=None, ttl: int=None, uri: str=None, uuid: str=None, version: int=None):  # noqa: E501
        """Table - a model defined in Swagger

        :param name: The name of this Table.  # noqa: E501
        :type name: str
        :param table_uri: The table_uri of this Table.  # noqa: E501
        :type table_uri: str
        :param ttl: The ttl of this Table.  # noqa: E501
        :type ttl: int
        :param uri: The uri of this Table.  # noqa: E501
        :type uri: str
        :param uuid: The uuid of this Table.  # noqa: E501
        :type uuid: str
        :param version: The version of this Table.  # noqa: E501
        :type version: int
        """
        self.swagger_types = {
            'name': str,
            'table_uri': str,
            'ttl': int,
            'uri': str,
            'uuid': str,
            'version': int
        }

        self.attribute_map = {
            'name': 'name',
            'table_uri': 'table_uri',
            'ttl': 'ttl',
            'uri': 'uri',
            'uuid': 'uuid',
            'version': 'version'
        }

        self._name = name
        self._table_uri = table_uri
        self._ttl = ttl
        self._uri = uri
        self._uuid = uuid
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'Table':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Table of this Table.  # noqa: E501
        :rtype: Table
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Table.


        :return: The name of this Table.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Table.


        :param name: The name of this Table.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def table_uri(self) -> str:
        """Gets the table_uri of this Table.


        :return: The table_uri of this Table.
        :rtype: str
        """
        return self._table_uri

    @table_uri.setter
    def table_uri(self, table_uri: str):
        """Sets the table_uri of this Table.


        :param table_uri: The table_uri of this Table.
        :type table_uri: str
        """

        self._table_uri = table_uri

    @property
    def ttl(self) -> int:
        """Gets the ttl of this Table.

        Seconds to the invalidation of the API.  # noqa: E501

        :return: The ttl of this Table.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl: int):
        """Sets the ttl of this Table.

        Seconds to the invalidation of the API.  # noqa: E501

        :param ttl: The ttl of this Table.
        :type ttl: int
        """
        if ttl is None:
            raise ValueError("Invalid value for `ttl`, must not be `None`")  # noqa: E501

        self._ttl = ttl

    @property
    def uri(self) -> str:
        """Gets the uri of this Table.


        :return: The uri of this Table.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this Table.


        :param uri: The uri of this Table.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Table.


        :return: The uuid of this Table.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Table.


        :param uuid: The uuid of this Table.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def version(self) -> int:
        """Gets the version of this Table.


        :return: The version of this Table.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this Table.


        :param version: The version of this Table.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
