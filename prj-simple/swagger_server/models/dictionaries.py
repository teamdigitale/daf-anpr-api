# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dictionary import Dictionary  # noqa: F401,E501
from swagger_server import util


class Dictionaries(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, items: List[Dictionary]=None, offset: int=None, offset_next: int=None):  # noqa: E501
        """Dictionaries - a model defined in Swagger

        :param items: The items of this Dictionaries.  # noqa: E501
        :type items: List[Dictionary]
        :param offset: The offset of this Dictionaries.  # noqa: E501
        :type offset: int
        :param offset_next: The offset_next of this Dictionaries.  # noqa: E501
        :type offset_next: int
        """
        self.swagger_types = {
            'items': List[Dictionary],
            'offset': int,
            'offset_next': int
        }

        self.attribute_map = {
            'items': 'items',
            'offset': 'offset',
            'offset_next': 'offset_next'
        }

        self._items = items
        self._offset = offset
        self._offset_next = offset_next

    @classmethod
    def from_dict(cls, dikt) -> 'Dictionaries':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dictionaries of this Dictionaries.  # noqa: E501
        :rtype: Dictionaries
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self) -> List[Dictionary]:
        """Gets the items of this Dictionaries.


        :return: The items of this Dictionaries.
        :rtype: List[Dictionary]
        """
        return self._items

    @items.setter
    def items(self, items: List[Dictionary]):
        """Sets the items of this Dictionaries.


        :param items: The items of this Dictionaries.
        :type items: List[Dictionary]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def offset(self) -> int:
        """Gets the offset of this Dictionaries.


        :return: The offset of this Dictionaries.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """Sets the offset of this Dictionaries.


        :param offset: The offset of this Dictionaries.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def offset_next(self) -> int:
        """Gets the offset_next of this Dictionaries.


        :return: The offset_next of this Dictionaries.
        :rtype: int
        """
        return self._offset_next

    @offset_next.setter
    def offset_next(self, offset_next: int):
        """Sets the offset_next of this Dictionaries.


        :param offset_next: The offset_next of this Dictionaries.
        :type offset_next: int
        """
        if offset_next is None:
            raise ValueError("Invalid value for `offset_next`, must not be `None`")  # noqa: E501

        self._offset_next = offset_next
