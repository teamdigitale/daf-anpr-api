# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.table import Table  # noqa: F401,E501
from swagger_server import util


class Tables(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, item: List[Table]=None, offset: int=None, offset_next: int=None):  # noqa: E501
        """Tables - a model defined in Swagger

        :param item: The item of this Tables.  # noqa: E501
        :type item: List[Table]
        :param offset: The offset of this Tables.  # noqa: E501
        :type offset: int
        :param offset_next: The offset_next of this Tables.  # noqa: E501
        :type offset_next: int
        """
        self.swagger_types = {
            'item': List[Table],
            'offset': int,
            'offset_next': int
        }

        self.attribute_map = {
            'item': 'item',
            'offset': 'offset',
            'offset_next': 'offset_next'
        }

        self._item = item
        self._offset = offset
        self._offset_next = offset_next

    @classmethod
    def from_dict(cls, dikt) -> 'Tables':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tables of this Tables.  # noqa: E501
        :rtype: Tables
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item(self) -> List[Table]:
        """Gets the item of this Tables.


        :return: The item of this Tables.
        :rtype: List[Table]
        """
        return self._item

    @item.setter
    def item(self, item: List[Table]):
        """Sets the item of this Tables.


        :param item: The item of this Tables.
        :type item: List[Table]
        """

        self._item = item

    @property
    def offset(self) -> int:
        """Gets the offset of this Tables.


        :return: The offset of this Tables.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """Sets the offset of this Tables.


        :param offset: The offset of this Tables.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def offset_next(self) -> int:
        """Gets the offset_next of this Tables.


        :return: The offset_next of this Tables.
        :rtype: int
        """
        return self._offset_next

    @offset_next.setter
    def offset_next(self, offset_next: int):
        """Sets the offset_next of this Tables.


        :param offset_next: The offset_next of this Tables.
        :type offset_next: int
        """
        if offset_next is None:
            raise ValueError("Invalid value for `offset_next`, must not be `None`")  # noqa: E501

        self._offset_next = offset_next
